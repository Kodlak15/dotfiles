(defwidget bar []
  (box 
    :class "bar"
    :orientation "h"
    (left_container)
    (center_container)
    (right_container)
  )
)

(defwidget left_container [] 
  (box
    :class "left-container"
    :space-evenly false
    ;; (power)
    ;; (workspaces)
    (hardware)
  )
)

(defwidget center_container []
  (box
    :class "center-container"
    :space-evenly false
    :halign "center"
    ;; (window_w)
  )
)

(defwidget right_container []
  (box
    :class "right-container"
    :space-evenly false
    :halign "end"
    (weather)
    (time)
  )
)

;; Utils

(defwidget metric [label value onchange]
  (box 
    :orientation "h"
    :class "metric"
    :space-evenly false
    (box :class "label" label)
    (scale 
      :min 0
      :max 101
      :active {onchange != ""}
      :value value
      :onchange onchange
    )
  )
)

;; Left container items
;; (include "./widgets/power/power.yuck")
;; (include "./widgets/hyprland/workspaces.yuck")
;; (include "./widgets/hyprland/window.yuck")

(defwidget hardware []
  (eventbox
    :class "hardware-event"
    (box
      :class "hardware"
      (cpu)
      (ram)
    )
  )
)

(defwidget cpu []
  (eventbox
    :class "cpu-event"
    (box
      :class "cpu"
      (label
        :class "cpu-label"
        :text " "
      )
      {round(EWW_CPU["avg"], 1)}
      (label
        :text "GHz"
      )
    )
  )
)

(defwidget ram []
  (eventbox
    :class "ram-event"
    (box
      :class "ram"
      (label
        :class "ram-label"
        :text "󰧑 "
      )
      {round(EWW_RAM["used_mem_perc"], 1)}"%"
    )
  )
)

;; Center container items
;; (include "./widgets/hyprland/window.yuck")

;; Right container items

(defpoll show_temp
  :interval "30s"
  "$HOME/.config/eww/scripts/weather/get_temp.sh"
)

(defpoll show_icon
  :interval "30s"
  "$HOME/.config/eww/scripts/weather/get_icon.sh"
)

(defwidget weather []
  (eventbox
    :class "weather-event"
    (box
      :class "weather"
      show_temp
      (image 
        :path show_icon
        :image-height 20
        :image-width 20
      )
    )
  )
)

(defpoll show_time 
  :interval "10s"
  :class "time"
  "date '+%I:%M %b %d, %Y'"
)

(defwidget time []
  (eventbox
    :class "time-event"
    (box
     :space-evenly false
     :halign "center"
     :class "time"
     show_time
    )
  )
)

;; Windows

(defwindow bar
  :monitor 2
  :windowtype "dock"
  :geometry (geometry 
    :x "0%"
    :y "0%"
    :width "100%"
    :height "2%"
    :anchor "top center"
  )
  :stacking "bg"
  :exclusive true
  (bar)
)
