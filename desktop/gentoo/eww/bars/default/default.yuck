(defwidget bar []
  (box 
    :class "bar"
    :orientation "h"
    (left_container)
    (center_container)
    (right_container)
  )
)

(defwidget left_container [] 
  (box
    :class "left-container"
    :space-evenly false
    (power)
    (workspaces)
    (hardware)
  )
)

(defwidget center_container []
  (box
    :class "center-container"
    :space-evenly false
    :halign "center"
    (window_w)
  )
)

(defwidget right_container []
  (box
    :class "right-container"
    :space-evenly false
    :halign "end"
    (weather)
    (time)
  )
)

;; Utils

(defwidget metric [label value onchange]
  (box 
    :orientation "h"
    :class "metric"
    :space-evenly false
    (box :class "label" label)
    (scale 
      :min 0
      :max 101
      :active {onchange != ""}
      :value value
      :onchange onchange
    )
  )
)

;; Left container items

(defwidget power []
  (eventbox
    ;; This is broken, best to open rofi with keybind
    ;; Command times out and clicking anywhere on bar will open this menu until reload
    :onclick "$HOME/.config/rofi/powermenu/type-1/powermenu.sh"
    :class "power-event"
    :timeout "10s"
    (box
      :class "power"
      (label :text "⏻")
    )
  )
)

(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get_workspaces.sh")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get_active_workspace.sh")
(defwidget workspaces []
  (eventbox 
    :onscroll "bash ~/.config/eww/scripts/change_active_workspace.sh {} ${current_workspace}" 
    :class "workspaces"
    (box 
      :class "workspaces-container"
      :space-evenly true
      (label 
        :text "${workspaces}${current_workspace}" 
        :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label :text "${workspace.id}")
          )
        )
      )
    )
  )
)

(defwidget hardware []
  (eventbox
    :class "hardware-event"
    (box
      :class "hardware"
      (cpu)
      (ram)
    )
  )
)

(defwidget cpu []
  (eventbox
    :class "cpu-event"
    (box
      :class "cpu"
      (label
        :class "cpu-label"
        :text " "
      )
      {round(EWW_CPU["avg"], 1)}
      (label
        :text "GHz"
      )
    )
  )
)

(defwidget ram []
  (eventbox
    :class "ram-event"
    (box
      :class "ram"
      (label
        :class "ram-label"
        :text "󰧑 "
      )
      {round(EWW_RAM["used_mem_perc"], 1)}"%"
    )
  )
)

;; Center container items

(deflisten window :initial "..." "sh ~/.config/eww/scripts/get_window_title.sh")
(defwidget window_w []
  (eventbox
    :class "window_w-event"
    (box
      :class "window_w"
      (label 
        :text "${window}"
        :limit-width 60
      )
    )
  )
)

(defwidget hyprland []
  (eventbox
    (image
     :class "hypr-logo"
     :path "./images/icon.ico"
     :image-width 20
     :image-height 20
    )
  )
)

;; Right container items

(defpoll show_temp
  :interval "30s"
  "$HOME/.config/eww/scripts/weather/get_temp.sh"
)

(defpoll show_icon
  :interval "30s"
  "$HOME/.config/eww/scripts/weather/get_icon.sh"
)

(defwidget weather []
  (eventbox
    :class "weather-event"
    (box
      :class "weather"
      show_temp
      (image 
        :path show_icon
        :image-height 20
        :image-width 20
      )
    )
  )
)

(defpoll show_time 
  :interval "10s"
  :class "time"
  "date '+%I:%M %b %d, %Y'"
)

(defwidget time []
  (eventbox
    :class "time-event"
    (box
     :space-evenly false
     :halign "center"
     :class "time"
     show_time
    )
  )
)

;; Windows

(defwindow bar
  :monitor 2
  :windowtype "dock"
  :geometry (geometry 
    :x "0%"
    :y "0%"
    :width "100%"
    :height "2%"
    :anchor "top center"
  )
  :stacking "bg"
  :exclusive true
  (bar)
)
